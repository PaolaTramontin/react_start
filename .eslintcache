[{"/Users/paolatramontin/Desktop/GA/react_start/src/index.js":"1","/Users/paolatramontin/Desktop/GA/react_start/src/App.js":"2","/Users/paolatramontin/Desktop/GA/react_start/src/components/Loan.js":"3","/Users/paolatramontin/Desktop/GA/react_start/src/components/PaymentInfo.js":"4"},{"size":224,"mtime":1612311218511,"results":"5","hashOfConfig":"6"},{"size":555,"mtime":1612850832922,"results":"7","hashOfConfig":"6"},{"size":5336,"mtime":1612846795615,"results":"8","hashOfConfig":"6"},{"size":419,"mtime":1612844877958,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"13ke6fn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"/Users/paolatramontin/Desktop/GA/react_start/src/index.js",[],["21","22"],"/Users/paolatramontin/Desktop/GA/react_start/src/App.js",["23"],"/Users/paolatramontin/Desktop/GA/react_start/src/components/Loan.js",["24","25","26","27"],"import React, { useState } from \"react\";\nimport PaymentInfo from \"./PaymentInfo\";\nimport Chart from \"react-google-charts\";\n\nexport function Loan() {\n  //initializing the default states using Hooks.\n\n  const [loanAmount, setLoanAmount] = useState(5000);\n\n  const [loanTerm, setLoanTerm] = useState(5);\n\n  const [loanTermMonths, setLoanTermMonths] = useState(60);\n\n  const [interest, setInterest] = useState(4.5);\n\n  const [roundedTerm, setRoundedTerm] = useState(5);\n\n  const [payment, setPayment] = useState(93.22);\n\n  const [totalInterest, setTotalInterest] = useState('');\n\n  //this function will grab the user input and set the new state for the fields.\n  //if the input has been filled, the if statement will run and set the new state for the input value\n  const handleInput = (event) => {\n    if (event.target.name === \"loanAmount\") {\n      setLoanAmount(event.target.value);\n    }\n    if (event.target.name === \"loanTerm\") {\n      let amount = event.target.value;\n      setLoanTerm(event.target.value);\n      setRoundedTerm(amount);\n      let monthly = event.target.value * 12;\n      setLoanTermMonths(monthly);\n    }\n\n    if (event.target.name === \"loanTermMonths\") {\n      setLoanTermMonths(event.target.value);\n      let annual = event.target.value / 12;\n      setLoanTerm(annual);\n      setRoundedTerm(annual.toFixed(0));\n    }\n    if (event.target.name === \"interest\") {\n      setInterest(event.target.value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    calculate();\n  };\n\n  // emi (monthly payments) calculation = p*(r(1+r)^n) / (((1+r)^n) -1)\n\n  //                      KEY:\n  // p = loan amount\n  //r= interest rate per month, which is yearly rate / 12 (months) * 100 (because we are dealing with decimals)\n  // n = number of monthly installments aka loan term\n\n  const calculate = () => {\n\n    //variables\n    let p = loanAmount;\n    let r = interest / (12 * 100);\n    let n = loanTermMonths;\n    // calcultin to get emi, only wait first 2 decimals.\n    let half = Math.pow(1 + r, n);\n    let emi = (p * (r * half)) / (half - 1);\n    let roundedEmi = emi.toFixed(2);\n    let realTotal = roundedEmi * loanTermMonths;\n    let totalInt = realTotal - loanAmount;\n    //setting the state for the new interest rate and monthly payment\n    setTotalInterest(totalInt.toFixed(2));\n    setPayment(roundedEmi);\n  };\n\n\n \n\n  return (\n    <div id=\"outsideDiv\">\n      <div id=\"container\">\n        <h2 id=\"details\"> Enter Your Details </h2>\n        <form  id=\"mainForm\" onSubmit={(event) => handleSubmit(event)}>\n          <label htmlFor=\"name\">Loan Amount </label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"loanAmount\"\n            name=\"loanAmount\"\n            value={loanAmount}\n            onChange={handleInput}\n          />\n          <br />\n          <label htmlFor=\"name\">Loan term (years)</label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"loanTerm\"\n            name=\"loanTerm\"\n            value={roundedTerm}\n            onChange={handleInput}\n          />\n          <br />\n          <label htmlFor=\"name\">Loan Term in Months </label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"loanTermMonths\"\n            name=\"loanTermMonths\"\n            value={loanTermMonths}\n            onChange={handleInput}\n          />\n          <br />\n          <label htmlFor=\"name\"> Interest rate per year(%)</label>\n          <br />\n          <input\n            type=\"text\"\n            id=\"interest\"\n            name=\"interest\"\n            value={interest}\n            onChange={handleInput}\n          />\n          <br />\n          <button id=\"button-2\" className=\"grow_spin\" type=\"submit\">\n            {\" \"}\n            Click to Calculate{\" \"}\n          </button>\n          <br />\n          {/* <h3 id=\"Payment\"> {payment} Dollars per Month</h3>    */}\n        </form>\n      </div>\n      <PaymentInfo\n        payment={payment}\n        loanAmount={loanAmount}\n        interest={interest}\n        totalInterest={totalInterest}\n      />\n      <div id=\"chart\">\n        <Chart\n          width={\"40vw\"}\n          height={\"40vh\"}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            [\"Task\", \"Hours per Day\"],\n            [\"Interest\", (interest / (12 * 100)) * loanAmount],\n            [\"Principal\", payment - (interest / (12 * 100)) * loanAmount],\n          ]}\n          options={{\n            title: \"Loan Breakdown: Monthly Payment: $\" + `${payment}`,\n            // Just add this option\n            is3D: true,\n            // colors: [\"#e3a38d\", \"#59c29b\", \"#ec8f6e\", \"#f3b49f\", \"#f6c7b6\"],\n            colors: [\"#E15E50\", \"#3AE5DF\", \"#D1EEEE\", \"#D1EEEE\", \"#D1EEEE\"],\n            backgroundColor: \"transparent\",\n          }}\n          rootProps={{ \"data-testid\": \"2\" }}\n        />\n      </div>\n      <footer>\n        <div id=\"footerDiv\">\n          <a target=\"_blank\"href=\"https://github.com/PaolaTramontin/react_start\">\n            <img\n              id=\"github\"\n              src=\"https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/456/278/datas/original.gif\"\n              width=\"40px\"\n            />\n            <span id=\"gh\">GitHub </span>\n          </a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default Loan;","/Users/paolatramontin/Desktop/GA/react_start/src/components/PaymentInfo.js",["28"],"import React from 'react'\nimport Loan from './Loan'\n\nconst PaymentInfo = (props) => {\n\n\n  return (\n    <div id=\"paymentDiv\">\n      <div id=\"paymentText\"> \n        <h1> Monthly Payments:</h1>\n        <h2 id=\"total\"> ${props.payment}</h2>\n        <h2> Total Principal Paid: ${props.loanAmount} </h2>\n       <h2> Total Interest Paid: $ {props.totalInterest} </h2>\n      </div>\n    </div>\n  )\n}\n\nexport default PaymentInfo\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":12,"column":9,"nodeType":"35","endLine":12,"endColumn":85},{"ruleId":"36","severity":1,"message":"37","line":10,"column":10,"nodeType":"38","messageId":"39","endLine":10,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":150,"column":57,"nodeType":"42","messageId":"43","endLine":150,"endColumn":58},{"ruleId":"44","severity":1,"message":"45","line":162,"column":11,"nodeType":"35","endLine":162,"endColumn":82},{"ruleId":"33","severity":1,"message":"34","line":163,"column":13,"nodeType":"35","endLine":167,"endColumn":15},{"ruleId":"36","severity":1,"message":"46","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":12},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'loanTerm' is assigned a value but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'Loan' is defined but never used.","no-global-assign","no-unsafe-negation"]